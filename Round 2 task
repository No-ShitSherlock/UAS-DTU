import cv2
import numpy as np
from math import atan2, cos, sin, sqrt, pi


def drawAxis(img, p_, q_, color, scale):
    p = list(p_)
    q = list(q_)

    ## [visualization1]
    angle = atan2(p[1] - q[1], p[0] - q[0])  # angle in radians
    hypotenuse = sqrt((p[1] - q[1]) ** 2 + (p[0] - q[0]) ** 2)

    # Here we lengthen the arrow by a factor of scale
    q[0] = p[0] - scale * hypotenuse * cos(angle)
    q[1] = p[1] - scale * hypotenuse * sin(angle)
    cv2.line(img, (int(p[0]), int(p[1])), (int(q[0]), int(q[1])), color, 3, cv2.LINE_AA)

    # create the arrow hooks
    p[0] = q[0] + 9 * cos(angle + pi / 4)
    p[1] = q[1] + 9 * sin(angle + pi / 4)
    cv2.line(img, (int(p[0]), int(p[1])), (int(q[0]), int(q[1])), color, 3, cv2.LINE_AA)

    p[0] = q[0] + 9 * cos(angle - pi / 4)
    p[1] = q[1] + 9 * sin(angle - pi / 4)
    cv2.line(img, (int(p[0]), int(p[1])), (int(q[0]), int(q[1])), color, 3, cv2.LINE_AA)


## [visualization1]
def getOrientation(pts, img):
    ## [pca]
    # Construct a buffer used by the pca analysis
    sz = len(pts)
    data_pts = np.empty((sz, 2), dtype=np.float64)
    for i in range(data_pts.shape[0]):
        data_pts[i, 0] = pts[i, 0, 0]
        data_pts[i, 1] = pts[i, 0, 1]

    # Perform PCA analysis
    mean = np.empty((0))
    mean, eigenvectors, eigenvalues = cv2.PCACompute2(data_pts, mean)

    # Store the center of the object
    cntr = (int(mean[0, 0]), int(mean[0, 1]))
    ## [pca]

    ## [visualization]
    # Draw the principal components
    cv2.circle(img, cntr, 3, (255, 0, 255), 2)
    p1 = (
    cntr[0] + 0.02 * eigenvectors[0, 0] * eigenvalues[0, 0], cntr[1] + 0.02 * eigenvectors[0, 1] * eigenvalues[0, 0])
    p2 = (
    cntr[0] - 0.02 * eigenvectors[1, 0] * eigenvalues[1, 0], cntr[1] - 0.02 * eigenvectors[1, 1] * eigenvalues[1, 0])
    drawAxis(img, cntr, p1, (255, 255, 0), 1)
    drawAxis(img, cntr, p2, (0, 0, 255), 5)

    angle = atan2(eigenvectors[0, 1], eigenvectors[0, 0])  # orientation in radians
    ## [visualization]

    # Label with the rotation angle
    label = "  Rotation Angle: " + str(-int(np.rad2deg(angle)) - 90) + " degrees"
    cv2.putText(img, label, (cntr[0], cntr[1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1, cv2.LINE_AA)

    return angle


# Create an object to read camera video
cap = cv2.VideoCapture(0)


def nothing(x):
    pass


cv2.namedWindow('FRAME')
lh = cv2.createTrackbar('LH', 'FRAME', 0, 180, nothing)
ls = cv2.createTrackbar('LS', 'FRAME', 102, 255, nothing)
lv = cv2.createTrackbar('LV', 'FRAME', 197, 255, nothing)
uh = cv2.createTrackbar('UH', 'FRAME', 180, 180, nothing)
us = cv2.createTrackbar('US', 'FRAME', 255, 255, nothing)
uv = cv2.createTrackbar('UV', 'FRAME', 255, 255, nothing)

while True:
    _, frame = cap.read()
    # Convert BGR to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Getting color from trackbar

    lh = cv2.getTrackbarPos('LH', 'FRAME')
    ls = cv2.getTrackbarPos('LS', 'FRAME')
    lv = cv2.getTrackbarPos('LV', 'FRAME')
    uh = cv2.getTrackbarPos('UH', 'FRAME')
    us = cv2.getTrackbarPos('US', 'FRAME')
    uv = cv2.getTrackbarPos('UV', 'FRAME')
    light_red = np.array([lh, ls, lv])
    dark_red = np.array([uh, us, uv])

    # define red color range
    # light_red = np.array([161, 155, 84])
    # dark_red = np.array([179, 255, 255])

    # Threshold the HSV image to get only red colors
    mask = cv2.inRange(hsv, light_red, dark_red)

    # Numpy method to create a black squares using for loop for sizes 1*1 to 5*5.
    for n in range(1, 6):
        kernel = np.ones((n, n), np.uint8)
        mask = cv2.erode(mask, kernel)  # Makes the image cleaner by removing tiny black squares

    # Contour detection
    mask = cv2.cvtColor(mask, cv2.COLOR_BGR2RGB)
    gray = cv2.cvtColor(mask, cv2.COLOR_RGB2GRAY)
    _, binary = cv2.threshold(gray, 225, 255, cv2.THRESH_BINARY_INV)
    contours, _ = cv2.findContours(binary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.01 * cv2.arcLength(cnt, True), True)
        area = cv2.contourArea(cnt)
        if area > 400 and len(approx) == 7:  # For detecting an arrow
            cv2.drawContours(frame, [approx], 0, (0, 0, 0), 5)

        # For angle
        getOrientation(approx, mask)

    # Display the mask
    cv2.imshow('Mask', mask)
    #cv2.imshow('Frame', frame)

    # Press Q on keyboard to stop recording
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# release video capture
# and video write objects
cap.release()

# Closes all the frames
cv2.destroyAllWindows()
